#FUNCTION MAIN  
#	Теперь f = -1
#	Теперь p это массив из 32 элементов int
#	Вызов функции pack<float>(&f, p);

#FUNCTION pack(T* pFloat, int* p)
#	Теперь pShort это массив из 64 элементов типа short int, которые находятся в той же области памяти, где находится массив p  
#	Теперь size = 4/2=2
#	Теперь index = 1
#	Вызов функции binaryDump(pShort[index], p + 16 * index);

#FUNCTION binaryDump(short int n, int* p)
#	Теперь mask = 040000
#	Теперь p[15] = 1
#	Теперь p[14] = 1
#	Теперь p[13] = 1
#	Теперь p[12] = 1
#	Теперь p[11] = 1
#	Теперь p[10] = 1
#	Теперь p[9] = 1
#	Теперь p[8] = 1
#	Теперь p[7] = 1
#	Теперь p[6] = 1
#	Теперь p[5] = 1
#	Теперь p[4] = 1
#	Теперь p[3] = 1
#	Теперь p[2] = 1
#	Теперь p[1] = 1
#	Теперь p[0] = 1
#	Теперь index = 0
#	Вызов функции binaryDump(pShort[index], p + 16 * index);

#FUNCTION binaryDump(short int n, int* p)
#	Теперь mask = 040000
#	Теперь p[15] = 0
#	Теперь p[14] = 0
#	Теперь p[13] = 0
#	Теперь p[12] = 0
#	Теперь p[11] = 0
#	Теперь p[10] = 0
#	Теперь p[9] = 0
#	Теперь p[8] = 0
#	Теперь p[7] = 0
#	Теперь p[6] = 0
#	Теперь p[5] = 0
#	Теперь p[4] = 0
#	Теперь p[3] = 0
#	Теперь p[2] = 0
#	Теперь p[1] = 0
#	Теперь p[0] = 0
#	Вызов функции print<float>(p);

#FUNCTION print(int* p)
#	Теперь size = 4
#	Вывод p[size-i-1] в при (int i = 0; i < size; ++i) 
10111111100000000000000000000000
#	Вызов функции printFields<float>(p);
#FUNCTION printFields(int* p)
#	Теперь size = 32
#	Вывод (p[size-1] < 0 ? 1 : 0) 
0#	Вывод p[size-1-i-1] при  (int i = 0; i < 8; ++i)
 01111111#	Вывод p[size-8-i-2] при  (int i = 0; i < 23; ++i)
 00000000000000000000000

#	Теперь d = -1
#	Теперь p это массив из 64 элементов int 
#	Вызов функции pack<float>(&d, p);

#FUNCTION pack(T* pFloat, int* p)
#	Теперь pShort это массив из 64 элементов типа short int, которые находятся в той же области памяти, где находится массив p  
#	Теперь size = 8/2=4
#	Теперь index = 3
#	Вызов функции binaryDump(pShort[index], p + 16 * index);

#FUNCTION binaryDump(short int n, int* p)
#	Теперь mask = 040000
#	Теперь p[15] = 1
#	Теперь p[14] = 1
#	Теперь p[13] = 1
#	Теперь p[12] = 1
#	Теперь p[11] = 1
#	Теперь p[10] = 1
#	Теперь p[9] = 1
#	Теперь p[8] = 1
#	Теперь p[7] = 1
#	Теперь p[6] = 1
#	Теперь p[5] = 1
#	Теперь p[4] = 1
#	Теперь p[3] = 1
#	Теперь p[2] = 1
#	Теперь p[1] = 1
#	Теперь p[0] = 1
#	Теперь index = 2
#	Вызов функции binaryDump(pShort[index], p + 16 * index);

#FUNCTION binaryDump(short int n, int* p)
#	Теперь mask = 040000
#	Теперь p[15] = 0
#	Теперь p[14] = 0
#	Теперь p[13] = 0
#	Теперь p[12] = 0
#	Теперь p[11] = 0
#	Теперь p[10] = 0
#	Теперь p[9] = 0
#	Теперь p[8] = 0
#	Теперь p[7] = 0
#	Теперь p[6] = 0
#	Теперь p[5] = 0
#	Теперь p[4] = 0
#	Теперь p[3] = 0
#	Теперь p[2] = 0
#	Теперь p[1] = 0
#	Теперь p[0] = 0
#	Теперь index = 1
#	Вызов функции binaryDump(pShort[index], p + 16 * index);

#FUNCTION binaryDump(short int n, int* p)
#	Теперь mask = 040000
#	Теперь p[15] = 0
#	Теперь p[14] = 0
#	Теперь p[13] = 0
#	Теперь p[12] = 0
#	Теперь p[11] = 0
#	Теперь p[10] = 0
#	Теперь p[9] = 0
#	Теперь p[8] = 0
#	Теперь p[7] = 0
#	Теперь p[6] = 0
#	Теперь p[5] = 0
#	Теперь p[4] = 0
#	Теперь p[3] = 0
#	Теперь p[2] = 0
#	Теперь p[1] = 0
#	Теперь p[0] = 0
#	Теперь index = 0
#	Вызов функции binaryDump(pShort[index], p + 16 * index);

#FUNCTION binaryDump(short int n, int* p)
#	Теперь mask = 040000
#	Теперь p[15] = 0
#	Теперь p[14] = 0
#	Теперь p[13] = 0
#	Теперь p[12] = 0
#	Теперь p[11] = 0
#	Теперь p[10] = 0
#	Теперь p[9] = 0
#	Теперь p[8] = 0
#	Теперь p[7] = 0
#	Теперь p[6] = 0
#	Теперь p[5] = 0
#	Теперь p[4] = 0
#	Теперь p[3] = 0
#	Теперь p[2] = 0
#	Теперь p[1] = 0
#	Теперь p[0] = 0
#	Вызов функции print<double>(p);

#FUNCTION print(int* p)
#	Теперь size = 8
#	Вывод p[size-i-1] в при (int i = 0; i < size; ++i) 
1011111111110000000000000000000000000000000000000000000000000000
#	Вызов функции printFields<double>(p);
#FUNCTION printFields(int* p)
#	Теперь size = 64
#	Вывод (p[size-1] < 0 ? 1 : 0) 
0#	Вывод p[size-1-i-1] при (int i = 0; i < 11; ++i)
 01111111111#	Вывод p[size-11-i-2] при (int i = 0; i < 52; ++i)
 0000000000000000000000000000000000000000000000000000
